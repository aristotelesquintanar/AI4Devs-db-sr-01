// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Candidate {
  id                Int               @id @default(autoincrement())
  firstName         String            @db.VarChar(100)
  lastName          String            @db.VarChar(100)
  email             String            @unique @db.VarChar(255)
  phone             String?           @db.VarChar(15)
  address           String?           @db.VarChar(100)
  careerId          Int?
  career            Career?           @relation(fields: [careerId], references: [id])
  educations        Education[]
  workExperiences   WorkExperience[]
  resumes           Resume[]
  applications      Application[]
  @@index([lastName])
}

model Education {
  id            Int         @id @default(autoincrement())
  institutionId Int
  institution   Institution @relation(fields: [institutionId], references: [id])
  jobTitleId    Int
  jobTitle      JobTitle    @relation(fields: [jobTitleId], references: [id])
  startDate     DateTime
  endDate       DateTime?
  candidateId   Int
  candidate     Candidate   @relation(fields: [candidateId], references: [id])
  @@index([institutionId])
  @@index([startDate])
}

model WorkExperience {
  id          Int       @id @default(autoincrement())
  company     String    @db.VarChar(100)
  position    String    @db.VarChar(100)
  description String?   @db.VarChar(200)
  startDate   DateTime
  endDate     DateTime?
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  jobTitleId  Int
  jobTitle    JobTitle  @relation(fields: [jobTitleId], references: [id])
  @@index([company])
  @@index([startDate])
}

model Resume {
  id          Int       @id @default(autoincrement())
  filePath    String    @db.VarChar(500)
  fileType    String    @db.VarChar(50)
  uploadDate  DateTime
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  locationId  Int?
  location    Location? @relation(fields: [locationId], references: [id])
  skills      ResumeSkill[]
  languages   ResumeLanguage[]
}

model Application {
  id               Int         @id @default(autoincrement())
  positionId       Int
  candidateId      Int
  applicationDate  DateTime?   @db.Date
  status           String?     @db.VarChar(50)
  notes            String?
  candidate        Candidate   @relation(fields: [candidateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  position         Position    @relation(fields: [positionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  interviews       Interview[]
}

model Company {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  employees Employee[]
  positions Position[]
}

model Employee {
  id         Int         @id @default(autoincrement())
  companyId  Int
  name       String      @db.VarChar(255)
  email      String      @unique @db.VarChar(255)
  role       String?     @db.VarChar(100)
  isActive   Boolean?    @default(true)
  company    Company     @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  interviews Interview[]
}

model Interview {
  id                Int            @id @default(autoincrement())
  applicationId     Int
  interviewStepId   Int
  employeeId        Int
  interviewDate     DateTime?      @db.Date
  result            String?        @db.VarChar(50)
  score             Int?
  notes             String?
  application       Application    @relation(fields: [applicationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employee          Employee       @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  interviewStep     InterviewStep  @relation(fields: [interviewStepId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model InterviewFlow {
  id             Int              @id @default(autoincrement())
  description    String?          @db.VarChar(255)
  interviewSteps InterviewStep[]
  positions      Position[]
}

model InterviewStep {
  id                Int            @id @default(autoincrement())
  interviewFlowId   Int
  interviewTypeId   Int
  name              String?        @db.VarChar(255)
  orderIndex        Int?
  interviews        Interview[]
  interviewFlow     InterviewFlow  @relation(fields: [interviewFlowId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  interviewType     InterviewType  @relation(fields: [interviewTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model InterviewType {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(100)
  description    String?
  interviewSteps InterviewStep[]
}

model Position {
  id                   Int            @id @default(autoincrement())
  companyId            Int
  interviewFlowId      Int
  title                String?        @db.VarChar(255)
  description          String?
  status               String?        @db.VarChar(50)
  isVisible            Boolean?       @default(true)
  location             String?        @db.VarChar(255)
  jobDescription       String?
  requirements         String?
  responsibilities     String?
  salaryMin            Decimal?       @db.Decimal(12, 2)
  salaryMax            Decimal?       @db.Decimal(12, 2)
  employmentType       String?        @db.VarChar(50)
  benefits             String?
  companyDescription   String?
  applicationDeadline  DateTime?      @db.Date
  contactInfo          String?        @db.VarChar(255)
  applications         Application[]
  company              Company        @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  interviewFlow        InterviewFlow  @relation(fields: [interviewFlowId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  skills               PositionSkill[]
}

model Institution {
  id         Int         @id @default(autoincrement())
  name       String      @unique @db.VarChar(100)
  educations Education[]
}

model JobTitle {
  id              Int              @id @default(autoincrement())
  name            String           @unique @db.VarChar(150)
  educations      Education[]
  workExperiences WorkExperience[]
}

model Location {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(100)
  resumes  Resume[]
}

model Skill {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(100)
  resumes  ResumeSkill[]
  positions PositionSkill[]
}

model Language {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(100)
  resumes  ResumeLanguage[]
}

model ResumeSkill {
  resumeId Int
  skillId  Int
  resume   Resume @relation(fields: [resumeId], references: [id])
  skill    Skill  @relation(fields: [skillId], references: [id])
  @@id([resumeId, skillId])
}

model ResumeLanguage {
  resumeId   Int
  languageId Int
  resume     Resume   @relation(fields: [resumeId], references: [id])
  language   Language @relation(fields: [languageId], references: [id])
  @@id([resumeId, languageId])
}

model PositionSkill {
  positionId Int
  skillId    Int
  position   Position @relation(fields: [positionId], references: [id])
  skill      Skill    @relation(fields: [skillId], references: [id])
  @@id([positionId, skillId])
}

model Career {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  candidates Candidate[]
}